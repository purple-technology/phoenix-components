import{s as I,r as c,e as t}from"./iframe-22864007.js";import{F as D}from"./index-3434f921.js";import{N as q}from"./index-bd9eef83.js";import{S as k}from"./index-3ed137a2.js";const L=I.div``,T=I.div`
	display: grid;
	grid-template-columns: 0.6fr 1fr 1fr;
	grid-column-gap: 15px;
`,j=(a,e)=>{switch(a){case 1:return e%4==0&&e%100||e%400==0?29:28;case 8:case 3:case 5:case 10:return 30;default:return 31}},B=(a,e,l)=>{if(!a||!e||!l)return!1;const u=(typeof e=="string"?parseInt(e,10):e)-1;return u>=0&&u<12&&a>0&&a<=j(u,l)},R=[{value:1,label:"January"},{value:2,label:"February"},{value:3,label:"March"},{value:4,label:"April"},{value:5,label:"May"},{value:6,label:"June"},{value:7,label:"July"},{value:8,label:"August"},{value:9,label:"September"},{value:10,label:"October"},{value:11,label:"November"},{value:12,label:"December"}],_=(a,e)=>{const l=a.find(u=>u.value===e);return l?l.label:""},G=({size:a="md",months:e=R,locale:l="eu",testId:u="DateInput",onChange:b,warning:S,error:m,inputLabels:O,dateFormatError:p="Please enter a valid date.",value:n,className:M,dayProps:N,monthProps:P,yearProps:V,...r})=>{const E=e??[],[o,x]=c.useState((n==null?void 0:n.day)??null),[s,A]=c.useState(n!=null&&n.month?{value:n.month,label:_(E,n.month)}:null),[i,F]=c.useState((n==null?void 0:n.year)??null),[C,y]=c.useState(void 0);c.useEffect(()=>{o&&s&&i?B(o,s.value,i)?(b({day:o,month:typeof s.value=="string"?parseInt(s.value,10):s.value,year:i}),y(void 0)):(b(null),y(p)):(b(null),y(void 0))},[o,s,i,p]);const f=O??{day:"Day",month:"Month",year:"Year"},h=()=>{o&&s&&i&&r.setTouched&&r.setTouched(!0)},v=t.createElement(q,{name:"day",min:1,max:31,pattern:"[0-9]*",autoComplete:"bday-day",label:f.day,value:o,onChange:d=>x(d),onBlur:h,error:!!m,size:a,success:r.success,disabled:r.disabled,maxDecimalCount:0,numberFormatErrorMessage:p,...N}),g=t.createElement(k,{name:"month",label:f.month,value:s,onChange:d=>A(d),onBlur:h,options:E,error:!!m,size:a,success:r.success,disabled:r.disabled,...P}),w=t.createElement(q,{name:"year",min:1,autoComplete:"bday-year",pattern:"[0-9]*",label:f.year,value:i,onChange:d=>F(d),onBlur:h,error:!!m,size:a,success:r.success,disabled:r.disabled,maxDecimalCount:0,numberFormatErrorMessage:p,...V}),J=()=>l==="ja"?t.createElement(T,null,w,g,v):l==="us"?t.createElement(T,null,g,v,w):t.createElement(T,null,v,g,w);return t.createElement(L,{className:M,"data-testid":u},J(),C&&!m&&t.createElement(D,{error:C}),t.createElement(D,{warning:S,error:m}))};G.__docgenInfo={description:"",methods:[],displayName:"DateInput",props:{testId:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:"'DateInput'",computed:!1}},className:{required:!1,tsType:{name:"string"},description:""},value:{required:!0,tsType:{name:"union",raw:"DateValue | null",elements:[{name:"DateValue"},{name:"null"}]},description:""},onChange:{required:!0,tsType:{name:"signature",type:"function",raw:"(date: DateValue | null) => void",signature:{arguments:[{type:{name:"union",raw:"DateValue | null",elements:[{name:"DateValue"},{name:"null"}]},name:"date"}],return:{name:"void"}}},description:""},success:{required:!1,tsType:{name:"boolean"},description:"Green border and checkmark visible"},warning:{required:!1,tsType:{name:"union",raw:"ReactElement | string",elements:[{name:"ReactElement"},{name:"string"}]},description:"Show yellow warning text and icon under the input"},error:{required:!1,tsType:{name:"union",raw:"ReactElement | string | boolean",elements:[{name:"ReactElement"},{name:"string"},{name:"boolean"}]},description:"Show red error text and icon under the input"},months:{required:!1,tsType:{name:"Array",elements:[{name:"SelectOption"}],raw:"Array<SelectOption>"},description:"An array of objects of the form { value: 1, label: 'January' }",defaultValue:{value:`[
	{ value: 1, label: 'January' },
	{ value: 2, label: 'February' },
	{ value: 3, label: 'March' },
	{ value: 4, label: 'April' },
	{ value: 5, label: 'May' },
	{ value: 6, label: 'June' },
	{ value: 7, label: 'July' },
	{ value: 8, label: 'August' },
	{ value: 9, label: 'September' },
	{ value: 10, label: 'October' },
	{ value: 11, label: 'November' },
	{ value: 12, label: 'December' }
]`,computed:!1}},inputLabels:{required:!1,tsType:{name:"InputLabels"},description:""},dateFormatError:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:"'Please enter a valid date.'",computed:!1}},locale:{required:!1,tsType:{name:"union",raw:"'eu' | 'us' | 'ja'",elements:[{name:"literal",value:"'eu'"},{name:"literal",value:"'us'"},{name:"literal",value:"'ja'"}]},description:"The locality the date format should follow",defaultValue:{value:"'eu'",computed:!1}},size:{required:!1,tsType:{name:"SizingSmMdLg"},description:"",defaultValue:{value:"'md'",computed:!1}},disabled:{required:!1,tsType:{name:"boolean"},description:""},setTouched:{required:!1,tsType:{name:"signature",type:"function",raw:"(touched: boolean) => void",signature:{arguments:[{type:{name:"boolean"},name:"touched"}],return:{name:"void"}}},description:'For use with Formik (but possibly other frameworks that work with the concept of a field being "touched").'},dayProps:{required:!1,tsType:{name:"Omit",elements:[{name:"NumberInputProps"},{name:"union",raw:"'value' | 'onChange'",elements:[{name:"literal",value:"'value'"},{name:"literal",value:"'onChange'"}]}],raw:"Omit<NumberInputProps, 'value' | 'onChange'>"},description:""},monthProps:{required:!1,tsType:{name:"Omit",elements:[{name:"SelectProps"},{name:"literal",value:"'onChange'"}],raw:"Omit<SelectProps, 'onChange'>"},description:""},yearProps:{required:!1,tsType:{name:"Omit",elements:[{name:"NumberInputProps"},{name:"union",raw:"'value' | 'onChange'",elements:[{name:"literal",value:"'value'"},{name:"literal",value:"'onChange'"}]}],raw:"Omit<NumberInputProps, 'value' | 'onChange'>"},description:""}}};export{G as D};
