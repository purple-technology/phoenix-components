import{s as y,e as o,r as g}from"./iframe-22864007.js";import{a as h}from"./stories-5d325111.js";import{o as S}from"./options-e613a9f7.js";import{C as b}from"./index-16bf4b38.js";import{C as w}from"./index-e4460024.js";import"./Sizing-35dbcd46.js";import"./index-22a97e01.js";import"./CheckboxRadioStyles-a1692841.js";import"./helpers-4992d6b4.js";import"./Color-0aa54fb0.js";import"./colors-3cc0579a.js";import"./rtl-a2dddcc3.js";import"./index-3434f921.js";import"./index-15f66ba7.js";import"./SpacingStyles-a9a54458.js";import"./CheckboxStyles-a004ec5f.js";import"./check-9c2d93e5.js";import"./assertThisInitialized-72cc4d9c.js";import"./index-90e8dd18.js";import"./useFormControl-ca195f92.js";import"./times-e63eec19.js";import"./angle-down-c5ec8aca.js";const E=y.div`
	display: flex;
	align-items: center;
`,M=(e,t)=>{var a;if(t.context==="value")return e.label;const r=(a=t.selectValue)==null?void 0:a.some(T=>T.value===e.value);return o.createElement(E,null,o.createElement(b,{checked:r,readOnly:!0}),e.label)},l=({value:e=[],testId:t="MultiSelect",...r})=>o.createElement(w,{formatOptionLabel:M,multiple:!0,value:e,testId:t,...r});l.__docgenInfo={description:"",methods:[],displayName:"MultiSelect",props:{testId:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:"'MultiSelect'",computed:!1}},className:{required:!1,tsType:{name:"string"},description:""},label:{required:!1,tsType:{name:"string"},description:"Text displayed inside the input field"},success:{required:!1,tsType:{name:"boolean"},description:"Green border and checkmark visible"},warning:{required:!1,tsType:{name:"union",raw:"ReactElement | string",elements:[{name:"ReactElement"},{name:"string"}]},description:"Show yellow warning text and icon under the input"},error:{required:!1,tsType:{name:"union",raw:"ReactElement | string | boolean",elements:[{name:"ReactElement"},{name:"string"},{name:"boolean"}]},description:"Show red error text and icon under the input"},contentRight:{required:!1,tsType:{name:"union",raw:"string | React.ReactNode",elements:[{name:"string"},{name:"ReactReactNode",raw:"React.ReactNode"}]},description:"Content to display on the right in LTR and on the left in RTL mode"},helperText:{required:!1,tsType:{name:"string"},description:"Helper text to display when input is focused"},size:{required:!1,tsType:{name:"Sizing"},description:""},disabled:{required:!1,tsType:{name:"boolean"},description:""},focused:{required:!1,tsType:{name:"boolean"},description:""},minimal:{required:!1,tsType:{name:"boolean"},description:""},name:{required:!1,tsType:{name:"string"},description:""},options:{required:!1,tsType:{name:"Array",elements:[{name:"Option"}],raw:"Option[]"},description:""},onFocus:{required:!1,tsType:{name:"FocusEventHandler",elements:[{name:"union",raw:"HTMLInputElement | HTMLSelectElement",elements:[{name:"HTMLInputElement"},{name:"HTMLSelectElement"}]}],raw:"FocusEventHandler<HTMLInputElement | HTMLSelectElement>"},description:""},onBlur:{required:!1,tsType:{name:"FocusEventHandler",elements:[{name:"union",raw:"HTMLInputElement | HTMLSelectElement",elements:[{name:"HTMLInputElement"},{name:"HTMLSelectElement"}]}],raw:"FocusEventHandler<HTMLInputElement | HTMLSelectElement>"},description:""},reactSelectProps:{required:!1,tsType:{name:"Omit",elements:[{name:"ReactSelectProps",elements:[{name:"Option"},{name:"literal",value:"true"}],raw:"ReactSelectProps<Option, IsMulti>"},{name:"literal",value:"'theme'"}],raw:"Omit<ReactSelectProps<Option, IsMulti>, 'theme'>"},description:"Props to pass to react-select. These props will overwrite any other props from this component. See API docs here https://react-select.com/props"},preventSearch:{required:!1,tsType:{name:"boolean"},description:"If true, disables search functionality which is enabled by default."},onChange:{required:!0,tsType:{name:"signature",type:"function",raw:"(option: readonly Option[]) => void",signature:{arguments:[{type:{name:"unknown"},name:"option"}],return:{name:"void"}}},description:""},value:{required:!1,tsType:{name:"Array",elements:[{name:"Option"}],raw:"Option[]"},description:"",defaultValue:{value:"[]",computed:!1}},maxVisibleSelectedItems:{required:!1,tsType:{name:"number"},description:'Maximum no. of visible selected items. Items above this number will be rendered as "+ X selected". Should be used when space for the form element is constrained.'}}};const J={title:"components / MultiSelect",component:l,argTypes:h,parameters:{componentSubtitle:"Select with custom dropdown and search capabilities based on react-select"}},n=e=>{const[t,r]=g.useState(e.value);return o.createElement(l,{...e,value:t,onChange:a=>r(a.slice()),options:S})};n.storyName="MultiSelect";n.args={label:"Select something",size:"md"};const s={render:n,args:{...n.args}},i={render:n,args:{...n.args,maxVisibleSelectedItems:1}};var m,p,c;s.parameters={...s.parameters,docs:{...(m=s.parameters)==null?void 0:m.docs,source:{originalSource:`{
  render: Template,
  args: {
    ...Template.args
  }
}`,...(c=(p=s.parameters)==null?void 0:p.docs)==null?void 0:c.source}}};var d,u,f;i.parameters={...i.parameters,docs:{...(d=i.parameters)==null?void 0:d.docs,source:{originalSource:`{
  render: Template,
  args: {
    ...Template.args,
    maxVisibleSelectedItems: 1
  }
}`,...(f=(u=i.parameters)==null?void 0:u.docs)==null?void 0:f.source}}};const K=["Default","MaxVisibleItems"];export{s as Default,i as MaxVisibleItems,K as __namedExportsOrder,J as default};
